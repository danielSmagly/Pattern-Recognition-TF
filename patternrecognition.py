# -*- coding: utf-8 -*-
"""PatternRecognition

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F8YRuY6RfNQTTBZ4JawqIUfSbxMe1VSW
"""

"""
  Simple Pattern Prediction using Python & Tensorflow 2.7.0
  Data Visulized using Matplotlib 3.5.0
"""


# Import libraries
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Collect pattern shape and data from user
intVal = input("Enter initial value: ")
intVal = int(intVal)
print(intVal)

rangeVal = input("Enter number of values in set: ")
rangeVal = int(rangeVal)
print(rangeVal)

stepVal = input("Enter step value: ")
stepVal = int(stepVal)
print(stepVal)

# Initialize data set into tensor
X = tf.range(intVal, rangeVal, stepVal)
y = X+10

dataset = len(X) * 0.8

# Seperate testing data and training data
X_train = X[:int(dataset)] 
y_train = y[:int(dataset)]
X_test = X[int(dataset):] 
y_test = y[int(dataset):]

# model_1 initilized

# Create Sequential model with 2 hidden layers
model_1 = tf.keras.Sequential([
  tf.keras.layers.Dense(75, activation="relu"),
  tf.keras.layers.Dense(75, activation="relu"),
  tf.keras.layers.Dense(1)
])

# Compile model, calculate loss with MAE, optimize model with Adam
model_1.compile(loss = tf.keras.losses.mean_absolute_error,
                optimizer = tf.keras.optimizers.Adam(learning_rate=0.01),
                metrics=["mae"])

# Train model for 100 epochs
model_1.fit(tf.expand_dims(X_train, axis=-1), y_train, epochs=100)

y_pred = model_1.predict(X_test)

# Initilize function to help visulize data
def plot_predictions(train_data = X_train,
                     train_labels = y_train,
                     test_data = X_test,
                     test_labels = y_test,
                     predictions = y_pred):
  
  plt.figure(figsize=(10,10))
  plt.scatter(train_data, train_labels, c="g", label="training data")
  plt.scatter(test_data, test_labels, c="b", label="testing data")
  plt.scatter(test_data, predictions, c="r", label="predictions")
  plt.legend();

# Test trained model against test data
y_preds_1 = model_1.predict(X_test)

# Output visulized data comparing actual data vs. data predicted by model
plot_predictions(predictions=y_preds_1)